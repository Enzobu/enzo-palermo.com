<?php
session_start();

if(empty($_SESSION)) {
    // V√©rification si la cl√© 'isAdmin' existe dans la variable de session
    header("Refresh: 0;url=/projets/Workshop_SN2/login.php?error=2");
}

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <?php include("php/head.php"); ?>
    <title>Workshop Sn2</title>
    <link rel="stylesheet" href="/projets/Workshop_SN2/style/cours.css">
</head>
<body>
    <header class="header">
        <?php include("php/header.php"); ?>
    </header>
    
    <main class="main">
        <div class="content">
            <div class="left-menu">
                <li>Vid√©o</li>
                <li>Explication</li>
                <li>Exercice</li>
                <li>Pour approfondir</li>
            </div>
            <div class="right-content">
                <div class="rc1">
                    <div class="video-container">
                        <iframe src="https://www.youtube.com/embed/ZBqAyIbul0U" frameborder="0" ></iframe>
                    </div>
                    <div class="rc1b">
                        <img src="/projets/Workshop_SN2/images/pp1.svg" alt="">
                        <p>Hector TechAlgo</p>
                    </div>
                </div> 
                <div class="rc2">
                    <p>
                        Bienvenue dans notre vid√©o "Comment Structurer un Algorithme - Guide pour D√©butants". Si vous √™tes novice en programmation ou   que vous cherchez √† renforcer vos bases, cette vid√©o est faite pour vous !
                        Dans cette le√ßon instructive, nous allons explorer en d√©tail les principes fondamentaux de la structuration d'un algorithme.    Que vous envisagiez de coder en Python, Java, C++, ou tout autre langage de programmation, les bases de la structuration d'un  algorithme restent les m√™mes, et nous allons vous les expliquer de mani√®re claire et accessible.
                    </p>
                    <h3>Explication</h3>
                    <div class="liste-exp">
                        <li>Qu'est-ce qu'un algorithme ? Nous commencerons par une introduction √† la notion d'algorithme, en expliquant pourquoi ils sont essentiels dans la programmation et la r√©solution de probl√®mes.                            
                        </li>
                        <br>
                        <li>Les √©tapes de la structuration : Nous vous guiderons √† travers les √©tapes de base pour concevoir un algorithme efficace, en mettant l'accent sur la compr√©hension du probl√®me, la planification des √©tapes et la mise en ≈ìuvre.</li>
                        <br>
                        <li>La s√©quentialit√© : Nous verrons comment organiser vos instructions de mani√®re s√©quentielle pour obtenir le r√©sultat souhait√©.</li>
                        <br>
                        <li>Les boucles et les conditionnelles : Vous d√©couvrirez comment incorporer des boucles et des structures conditionnelles pour g√©rer diff√©rentes situations dans votre algorithme.</li>
                        <br>
                        <li>La modularit√© : Nous vous montrerons comment diviser votre algorithme en fonctions ou en modules r√©utilisables pour faciliter la maintenance et la compr√©hension.</li>
                        <br>
                        <li>La documentation : Enfin, nous aborderons l'importance de documenter votre code pour vous et pour les autres programmeurs.</li>
                        <br>
                    </div>
                    <h3>Explication</h3>
                    <h4>Description de l'Exercice</h4>
                    <ul class="liste-exp">
                        <li>√âcrivez un algorithme simple qui prend deux nombres en entr√©e, les additionne, puis affiche le r√©sultat.</li>
                        <li>Instructions :
                            <ul>
                                <li class="lis">Demandez √† l'utilisateur de saisir le deuxi√®me nombre (num√©ro 2).</li>
                                <li class="lis">Demandez √† l'utilisateur de saisir le premier nombre (num√©ro 1).</li>
                                <li class="lis">Calculez la somme des deux nombres en utilisant une variable (somme).</li>
                                <li class="lis">Affichez le r√©sultat de la somme √† l'√©cran.</li>
                            </ul>
                        </li>
                        <li>Exemple :</li>
                        <img src="/projets/Workshop_SN2/images/exo.png" alt="">
                        </ul>
                </div>
                <div class="rc3">
                    <p>La structuration d'un algorithme est une comp√©tence essentielle pour tout d√©veloppeur en herbe. Elle sert de base √† la r√©solution efficace de probl√®mes informatiques et √† la cr√©ation de programmes fonctionnels. Dans cette le√ßon, nous avons explor√© les principes fondamentaux pour vous aider √† d√©marrer. Cependant, si vous souhaitez aller plus loin et affiner vos comp√©tences en structuration d'algorithmes, voici quelques ressources suppl√©mentaires √† explorer :<br><br><br>

                    1. Introduction √† l'Algorithmique : Cet article vous offre une vue d'ensemble approfondie de ce qu'est l'algorithmique, de son importance et de                     ses applications dans le monde de la programmation.<br><br>

                    2. Algorithmes S√©quentiels et Boucles : Approfondissez vos connaissances sur la s√©quentialit√© et les boucles dans les algorithmes. Comprenez                    comment ces concepts sont utilis√©s pour g√©rer des t√¢ches r√©p√©titives.<br><br>

                    3. Structures Conditionnelles : Explorez les structures conditionnelles telles que les d√©clarations "if" et "else". Apprenez comment elles vous                     permettent de prendre des d√©cisions dans votre algorithme en fonction de conditions sp√©cifiques.<br><br>
                    4. La Modularit√© en Programmation : D√©couvrez comment diviser un algorithme en modules r√©utilisables, ce qui facilite la maintenance du code et                     favorise la r√©utilisation.<br><br>

                    5. L'Art de la Documentation du Code : La documentation est souvent n√©glig√©e, mais elle est cruciale pour collaborer avec d'autres programmeurs et                  pour comprendre son propre code √† l'avenir. Apprenez les bonnes pratiques de documentation.<br><br>

                    6. Exercices Pratiques : Mettez en pratique vos comp√©tences en structuration d'algorithmes en r√©solvant une vari√©t√© d'exercices concrets. C'est un                  excellent moyen de renforcer vos connaissances.<br><br><br>
                    En explorant ces ressources compl√©mentaires, vous deviendrez un ma√Ætre de la structuration des algorithmes. N'oubliez pas que la pratique                   r√©guli√®re est la cl√© pour devenir un programmeur comp√©tent, alors essayez de cr√©er vos propres algorithmes et de r√©soudre des probl√®mes du monde                r√©el pour continuer √† progresser. Bonne exploration et bonne programmation ! üöÄ<br><br><br></p>
                </div>       
            </div>
        </div>
    </main>

    <footer class="footer">
        <?php include("php/footer.php"); ?>
    </footer>
</body>
</html>